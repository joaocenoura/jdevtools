---
# add specified repository into sources list
- name: add apt-repository for sonarqube (deb)
  apt_repository: repo='deb http://downloads.sourceforge.net/project/sonar-pkg/deb binary/' state=present
  tags: install

# install sonarqube (force=yes; package unsigned)
- name: install sonarqube
  apt: "pkg=sonar force=yes state=installed update_cache=yes"
  tags: install

- name: install sonarqube dependencies
  apt: "pkg={{ item }} state=installed"
  with_items:
    - mysql-server
    - python-mysqldb
  tags: install


# configure sonarqube
- name: configure sonarqube
  template: src=sonar.properties.j2 dest=/opt/sonar/conf/sonar.properties owner={{ sonar_user }} group={{ sonar_group }} mode=644
  notify: restart sonarqube
  tags: install

- name: configure sonarqube mysql - default db
  mysql_db: name=sonar encoding=utf8 state=present
  notify: restart sonarqube
  tags: install

- name: configure sonarqube mysql - default user
  mysql_user: "name={{ sonar_db_user }} host=localhost password={{ sonar_db_pass }} priv=sonar.*:ALL,GRANT state=present"
  notify: restart sonarqube
  tags: install

################################################################################
# backup
################################################################################

# setup backup folder & stop service
- name: create backup folder
  file: "path={{ backup_dir_sonarqube }} state=directory mode=0777"
  tags: backup

- name: stop sonarqube
  service: name=sonar state=stopped
  tags: backup

# backup database
- name: backup sonar db
  mysql_db:
    name={{ sonar_db_name }}
    target={{ backup_dir_sonarqube }}/{{ timestamp.stdout }}_{{ sonar_backup_db_filename }}
    state=dump
  notify: start sonarqube
  tags: backup

# backup configurations
- name: "backup {{ sonar_dir }}/conf"
  command: "tar -cf {{ backup_dir_sonarqube }}/{{ timestamp.stdout }}_{{ sonar_backup_conf_filename }} -C / {{ sonar_dir }}/conf"
  notify: start sonarqube
  tags: backup

# backup plugins
- name: "backup {{ sonar_dir }}/extensions/plugins"
  command: "tar -cf {{ backup_dir_sonarqube }}/{{ timestamp.stdout }}_{{ sonar_backup_plugins_filename }} -C / {{ sonar_dir }}/extensions/plugins"
  notify: start sonarqube
  tags: backup

################################################################################
# restore
################################################################################

# stop service
- name: stop sonarqube
  service: name=sonar state=stopped
  tags: backup

# restore database
- name: "restore sonar db - find latest backup"
  command: "{{ scripts_dir }}/get_newest_file.sh {{ backup_dir_sonarqube }} {{ sonar_backup_db_filename }}"
  register: sonar_backup_file
  ignore_errors: True
  tags: restore

- name: restore sonar db - mysql import latest_dump.sql
  mysql_db:
    state=import
    name={{ sonar_db_name }}
    target={{ backup_dir_sonarqube }}/{{ sonar_backup_file.stdout }}
  when: sonar_backup_file|success
  notify: start sonarqube
  tags: restore

# restore configurations
- name: "restore {{ sonar_dir }}/conf - find latest backup"
  command: "{{ scripts_dir }}/get_newest_file.sh {{ backup_dir_sonarqube }} {{ sonar_backup_conf_filename }}"
  register: sonar_backup_file
  ignore_errors: True
  tags: restore

- name: "restore {{ sonar_dir }}/conf - untar backup"
  unarchive: src={{ backup_dir_sonarqube }}/{{ sonar_backup_file.stdout }} dest=/ copy=no
  tags: restore
  when: sonar_backup_file|success

# restore configurations
- name: "restore {{ sonar_dir }}/extensions/plugins - find latest backup"
  command: "{{ scripts_dir }}/get_newest_file.sh {{ backup_dir_sonarqube }} {{ sonar_backup_plugins_filename }}"
  register: sonar_backup_file
  ignore_errors: True
  tags: restore

- name: "restore {{ sonar_dir }}/extensions/plugins - untar backup"
  unarchive: src={{ backup_dir_sonarqube }}/{{ sonar_backup_file.stdout }} dest=/ copy=no
  tags: restore
  when: sonar_backup_file|success
